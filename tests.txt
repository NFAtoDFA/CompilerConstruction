./tests/ok/ForStm.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun forLoop () :Unit{
    for (i in 0..10){
    }
}

fun main() :Unit{
    forLoop();
}
---------------------------------------------------

./tests/ok/argumentList.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun function(a : Int, b : Int) : Unit{ 
}

fun main() :Unit{
}
---------------------------------------------------

./tests/ok/class.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

class Class1{
    var a : Int = 0;
    var b : Int = 0;
    var good : Boolean = true;

    fun function() :Unit{ };
}


fun main() :Unit{
    var x : Class1 = Class1();
    var b : Int = x.a;
    when (x.good)
    {
        true -> true;
        false -> false;
    }
}
---------------------------------------------------

./tests/ok/constructor.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

class Human{
    val name : String = "bob";
    var age : Int = 7;
    var teeth : Int = 14;

    fun hello() :Unit{
     
    };
}

fun main() :Unit{
    var bob : Human = Human();
}

---------------------------------------------------

./tests/ok/expressions.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun function(a: Int, b: Int) : Unit{

}

class Class1{
    var first : Int = 0;
    var second: Double = 0.0;

    fun classFunction(a: Int, b: Int): Int{
        return a + b;
    };
}

fun main () :Unit{
    var a : Int = 1;
    var b : Int = 2;

    function(a, 5);
    var c : Class1 = Class1();
    a = c.first;
    var d : Int = 12;

    a = a++;
    a = a--;

    a = ++a;
    a = --a;
    a = -a;

    a = b*b;
    a = b+b;
    a = b-b;
    var e : Int = b/b;
    var f : Boolean = a<b;
    f = a>b;
    f = a<=b;
    f = a>=b;
    f = a==b;
    f = a!=b;
    f = true && false;
    f = true || false;
}
---------------------------------------------------

./tests/ok/forString.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() : Unit {
	var b : String = "";
	for (i in "willer"){
		b = i;
	}
	for (j in b){
		b;
	}
}
---------------------------------------------------

./tests/ok/ifStatement.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() :Unit{
    var a : Int = 1;
    var b : Int = 2;
    if (true) { a = b; } else { b = a;  }

    if(a != b){
        b = a;
    }
}
---------------------------------------------------

./tests/ok/lambdaExpression.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() :Unit{
    var lambda : (Int, Int ) -> Int = {a : Int, b : Int -> 2 * (a+b)};
}
---------------------------------------------------

./tests/ok/lambda_assign.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main () : Unit {
    var a : (Int, Int) -> Int; 
    a = {a : Int, b : Int -> a * b};
}
---------------------------------------------------

./tests/ok/mainfunc.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() : Unit{
    
}
---------------------------------------------------

./tests/ok/manyFunc.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun function1() :Unit{}

fun function2() :Unit{}

fun main() :Unit{}
---------------------------------------------------

./tests/ok/mutability.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() : Unit {
	val ImNotMutable : Int;
	ImNotMutable = 2;

    val ImAlsoNotMutable : Int = 2;

	var ImMutable : Int = 2;
	ImMutable = 3;
	ImMutable = 5;
}
---------------------------------------------------

./tests/ok/nullableVar.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() :Unit{
    var a : Int ? = null;
    var b : Int ? = 123;
}
---------------------------------------------------

./tests/ok/returnStatement.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun function(): Int{
    return 1;
} 

fun function2(): Double{
    return 1.1;
}


fun main() :Unit{
    var a: Int = function();
    var b: Double = function2();
}
---------------------------------------------------

./tests/ok/varDec.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() :Unit{
    var a : Int;
    var b : Int = 0;
    val c : Double = 5.5;
    var d : (Int, Int) -> Int;
}
---------------------------------------------------

./tests/ok/whenStatement.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun println(a : String) : Unit {
	return;
}

fun main() :Unit{

    var x : Int = 3;

    when(x) {
        1 -> println("x is one");
        2 -> println("x in two");
        else -> {
            println("x is something else");
        }
    }
}
---------------------------------------------------

./tests/ok/whileStatement.kt

EXPECTED OUTPUT:
TYPECHECK SUCCESSFUL

ACTUAL OUTPUT:
TYPECHECK SUCCESSFUL

fun main() :Unit{
    var a : Int = 0;
    while(a < 10){
        a++;
    }
}
---------------------------------------------------

./tests/parser/Error_funcDeclaration.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 5, column 18 due to lexer error

fun println(a : String) : Unit {

}

fun main() : Unit[
    println("Hello, World!");
]

//Wrong function declaration: function body is enclosed in "[]" instead of "{}"
---------------------------------------------------

./tests/parser/errCmt.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 3, column 5 before `/'


fun main() : Unit{
    /* This is a new program
    println("This is a new programm");
}
//unclosed comment
---------------------------------------------------

./tests/parser/error_argumentDeclaration.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 1, column 15 before `;'

fun add(a: Int; b: Int): Int{
    return a + b;
}

fun main() : Unit{
    add(2,3)
}

// argumentlist must be seperated with , and not ;
---------------------------------------------------

./tests/parser/error_comment.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 2, column 5 due to lexer error

fun main() : Unit{
    \*
    this is not a comment
    *\
}
// wrong comment 
---------------------------------------------------

./tests/parser/error_forRange.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 1, column 23 before `{'

fun print(a : String) {}

fun main()  : Unit{
	for (i inside 5..2){
		print(i);	
	}
}
---------------------------------------------------

./tests/parser/error_forStm.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 5, column 11 before `;'

fun print(a : String) : Unit {}

fun forLoop () : Unit{
    var i : Int = 0;
    for (i; i < 10; i++){
        print(i);
    }
}
// for loop must look like " for(var in range)""
---------------------------------------------------

./tests/parser/error_funcDeclaration2.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 1, column 10 before `:'

fun main : Unit{
    var a : Int;
}
//missing parentheses after main ()
---------------------------------------------------

./tests/parser/error_lambdaExpression.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 2, column 57 before `='

fun main() : Unit{
    var lambda : (Int, Int ) -> Int = {a : Int, b : Int => 2 * (a+b)};
}
// in the lambda expression -> instead of =>
---------------------------------------------------

./tests/parser/error_nullable.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 2, column 13 before `?'

fun main() : Unit{
    var x : ? Int = null
}

// the ? comes after the type for nullable variables
---------------------------------------------------

./tests/parser/error_returnStatement.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 1, column 23 before `{'

fun print(a : String) {}


fun main() : Unit{

    var a: Int = 3;
    var b: Int = 2;
    print(a+b);
    return
}
//missing semicolon after return
---------------------------------------------------

./tests/parser/error_varDec.kt

EXPECTED OUTPUT:
SYNTAX ERROR

ACTUAL OUTPUT:
SYNTAX ERROR:
syntax error at line 2, column 11 before `='

fun main() : Unit{
    var a = 1;
}
// missing of type Int
---------------------------------------------------

./tests/typechecker/OperatorErr.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
USAGE OF '+' OPERATION WITH DIFFERENT TYPES IN FUNCTION add

fun add() : Unit{
    var a: Int = 1;
    var b: Boolean = true;
    var c: Int = a + b;
}
//Operator "+" cannot be applied to Bool value
---------------------------------------------------

./tests/typechecker/VarDecl.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
ERROR IN IF EXPRESSIONVARIABLE Id "x" NON EXISTENT IN FUNCTION main

fun print(a : String): Unit {}

fun main() : Unit{
    if (x == 0){
        print("x is null");
    }else{
        print("x is not null");
    }
}
//variable not declared

---------------------------------------------------

./tests/typechecker/block.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
VARIABLE Id "b" NON EXISTENT IN FUNCTION main

fun main()  : Unit{
    {
        var a : Int = 2;
        {
            var a : Int = 0;
            var b : Int = 1;
        }
        a;
        b;
    }
}
//Cannot call the variable outside the block
---------------------------------------------------

./tests/typechecker/classSameFun.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
Variable Id "willer" already declared inside of Class Id "Human" in Class Id "Human"

class Human{
	fun willer() : String {
		return "willer";
	};
	fun willer(a : Int) : Int{
		return a;
	};
}
---------------------------------------------------

./tests/typechecker/classSameVar.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
Variable Id "age" already declared inside of Class Id "Human"

class Human {
	var age : Int = 7;
	val age : String = "willer";
}
---------------------------------------------------

./tests/typechecker/lambda_ass_wrong_type.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
THE TYPES OF THE ASSIGNMENT IS NOT THE SAME IN FUNCTION main

fun main() : Unit {
	var a : (Int, Int) -> Int;
    a = {b : Int, c : Int -> "I Am LAMBDA"};
}
---------------------------------------------------

./tests/typechecker/lambda_init_wrong_type.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
VARIABLE Id "a" INITIALIZED WITH VALUE OF WRONG TYPETypeFunType (FType [Type_Int] Type_String) IN FUNCTION main

fun main() : Unit {
	var a : (Int, Int) -> String = {c : Int -> "I Am LAMBDA"};
}
---------------------------------------------------

./tests/typechecker/mutability.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
CANNOT REASSIGN TO IMMUTABLE VARIABLE IN FUNCTION main

fun main() : Unit {
	val ImNotMutable : Int = 7;
	ImNotMutable = 3;
}
---------------------------------------------------

./tests/typechecker/numberofArgs.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
NOT ENOUGH ARGUMENTS GIVEN IN FUNCTION main

fun add(a: Int, b: Int): Int{
    return a + b;
}

fun main() : Unit{
    var a: Int = 1;
    var b: Int = 2;
    var c: Int = 3;
    add(a, b, c);
}
//wrong number of arguments were passed to the function call
---------------------------------------------------

./tests/typechecker/sameclass.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
Class Id "Human" already Exists

class Human{
	var i : Int = 0;
}

class Human{
	var j : String = "Willer";
}

fun main()  : Unit{}
---------------------------------------------------

./tests/typechecker/samefunc.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
Function Id "willer" DECLARED TWICE

fun willer(a : Int) : Int {
    var b : Int = 7;
    return b;
}

fun willer() : Int {
    return 7;
}

fun main()  : Unit{
    return 1;
}
---------------------------------------------------

./tests/typechecker/typeReturn.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
RETURN TYPE DOES NOT MATCH FUNCTION DECLARATION IN FUNCTION number

fun number(x: Int) : String {
    when (x) {
        0 -> return true;
        else -> return false;
    }
}
//return the wrong type
---------------------------------------------------

./tests/typechecker/var_name_func.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
Variable Id "age" already declared inside of Class Id "Human" in Class Id "Human"

class Human{
	var age : Int = 3;
	fun age() : Int {
		return 3;
	};
}
---------------------------------------------------

./tests/typechecker/when_mult_else.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
MULTIPLE ELSE BRANCHES IN WHEN STATEMENT IN FUNCTION main

fun main() : Unit {
    val x : Int = 7;
    when(x) {
        1 -> 1;
        1+2 -> 1;
        else -> 3;
        7 -> 7;
        else -> 4;
    }    
}
---------------------------------------------------

./tests/typechecker/when_wrong_type.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
WHEN EXPRESSION MISMATCH OF TYPES IN FUNCTION main

fun main() : Unit {
    val x : Int = 7;
    when(x) {
        1.3 -> 7;
        1 -> 5;
    }
}
---------------------------------------------------

./tests/typechecker/wrongOperator.kt

EXPECTED OUTPUT:
TYPE ERROR

ACTUAL OUTPUT:
TYPE ERROR:
TYPE OF THE EXPRESSION MUST BE BOOL IN FUNCTION main

fun main() : Unit{
    var a : Int = 1;
    var b : Int = 2;
    if(a = b){
        a = b;
    } else {
        b = a;
    }

    if(a != b){
        b = a;
    }
}

// assignment operator used instead of the equality operator in the if statement condition
---------------------------------------------------

